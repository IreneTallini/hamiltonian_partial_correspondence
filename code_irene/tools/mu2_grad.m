function gradient_mu2_term = mu2_grad(...
    A, C, Psi_fcts, G, M, v, lump_mass_mat_M, lump_mass_mat_N, mu_1, mu_2, sig)
xi = @(t) exp(-tanh(2*t - 1)/(4 * sig^2)); 
d_xi = arrayfun(@(t) ...
    -(((sech(2*t - 1)^2)/(2 * sig^2)) * ...
    exp(-tanh(2*t - 1)/(4 * sig^2))), v);
E = vecnorm(M.VERT(M.TRIV(:,2),:) - M.VERT(M.TRIV(:,1),:), 2, 2).^2; 
F = dot(M.VERT(M.TRIV(:,2),:) - M.VERT(M.TRIV(:,1),:), ...
    M.VERT(M.TRIV(:,3),:) - M.VERT(M.TRIV(:,1),:), 2);
G = vecnorm(M.VERT(M.TRIV(:,3),:) - M.VERT(M.TRIV(:,1),:), 2, 2).^2;
v_alpha = v(M.TRIV(:,2)) - v(M.TRIV(:,1));
v_beta = v(M.TRIV(:,3)) - v(M.TRIV(:,1));
D = (v_alpha.^2 .* G - 2 * v_alpha .* v_beta .* F ...
    + v_beta.^2 .* E) .^(1/2); %[m]
vert_to_tri_1 = sparse(1:M.m, M.TRIV(:,1), ones(1,M.m), M.m, M.n)';
vert_to_tri_2 = sparse(1:M.m, M.TRIV(:,2), ones(1,M.m), M.m, M.n)';
vert_to_tri_3 = sparse(1:M.m, M.TRIV(:,3), ones(1,M.m), M.m, M.n)';
K_1 = D.^(-1) .* ...
    ((v(M.TRIV(:,1)) - v(M.TRIV(:,2))) .* (G - F) + ...
    (v(M.TRIV(:,1)) - v(M.TRIV(:,3))) .* (E - F));
K_2 = D.^(-1) .* ...
    ((v(M.TRIV(:,2)) - v(M.TRIV(:,1))) .* G - ...
    (v(M.TRIV(:,3)) - v(M.TRIV(:,1))) .* F);
K_3 = D.^(-1) .* ...
    ((v(M.TRIV(:,3)) - v(M.TRIV(:,1))) .* E - ...
    (v(M.TRIV(:,2)) - v(M.TRIV(:,1))) .* F);  
K = [K_1 K_2 K_3]; %[m,3] la prima colonna contiene K rispetto al primo vertice etc...
xi_sum = arrayfun(xi, v(M.TRIV(:,1))) + ...
    arrayfun(xi, v(M.TRIV(:,2))) + ...
    arrayfun(xi, v(M.TRIV(:,3))); %[1,m]
gradient_mu2_term = 1/6 * ...
    (vert_to_tri_1 * (xi_sum .* K(:,1) + D .* d_xi(M.TRIV(:,1))) + ...
    vert_to_tri_2 * (xi_sum .* K(:,2) + D .* d_xi(M.TRIV(:,2))) + ...
    vert_to_tri_3 * (xi_sum .* K(:,3) + D .* d_xi(M.TRIV(:,3))));
end